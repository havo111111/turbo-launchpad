{"ast":null,"code":"import{ethers}from'ethers';import{config}from'../config';export class HyperEVMService{// Replace with actual verification contract\nconstructor(){this.provider=void 0;this.latestBlockNumber=0;this.verifiedContracts=new Set();this.HYPE_TOKEN='0x0d01dc56dcaaca66ad901c959b4011ec';this.VERIFICATION_CONTRACT='0x1234567890123456789012345678901234567890';this.provider=new ethers.providers.JsonRpcProvider(config.rpcUrl);}async getLatestBlockNumber(){const blockNumber=await this.provider.getBlockNumber();this.latestBlockNumber=blockNumber;return blockNumber;}async verifyContract(address){try{const verificationContract=new ethers.Contract(this.VERIFICATION_CONTRACT,['function isVerified(address) view returns (bool)'],this.provider);const isVerified=await verificationContract.isVerified(address);return isVerified;}catch(error){console.error('Error verifying contract:',error);return false;}}async getHYPEBalance(address){try{const hypeToken=new ethers.Contract(this.HYPE_TOKEN,['function balanceOf(address) view returns (uint256)','function decimals() view returns (uint8)'],this.provider);const[balance,decimals]=await Promise.all([hypeToken.balanceOf(address),hypeToken.decimals()]);return ethers.utils.formatUnits(balance,decimals);}catch(error){console.error('Error fetching HYPE balance:',error);return'0';}}async scanForNewCoins(){const newCoins=[];// Get the latest block number\nconst latestBlock=await this.getLatestBlockNumber();// Scan through recent blocks (last 100 blocks)\nfor(let i=Math.max(0,latestBlock-100);i<=latestBlock;i++){try{const block=await this.provider.getBlockWithTransactions(i);// Check each transaction for new token deployments\nfor(const tx of block.transactions){if(tx.to===null){// New contract deployment\nconst receipt=await this.provider.getTransactionReceipt(tx.hash);if(receipt&&receipt.contractAddress){const address=receipt.contractAddress;try{// Get token details\nconst token=new ethers.Contract(address,['function name() view returns (string)','function symbol() view returns (string)','function totalSupply() view returns (uint256)','function decimals() view returns (uint8)','function balanceOf(address) view returns (uint256)'],this.provider);const[name,symbol,totalSupply,decimals]=await Promise.all([token.name(),token.symbol(),token.totalSupply(),token.decimals()]);// Check if contract is verified\nconst isVerified=await this.verifyContract(address);// Get HYPE liquidity\nconst hypeBalance=await this.getHYPEBalance(address);newCoins.push({address,name,symbol,totalSupply:ethers.utils.formatUnits(totalSupply,decimals),timestamp:block.timestamp,price:0,priceChange24h:0,volume24h:0,liquidity:parseFloat(hypeBalance),holders:0,verified:isVerified,favorite:false});// Cache verified contracts\nif(isVerified){this.verifiedContracts.add(address);}}catch(error){console.error('Error fetching token details:',error);}}}}}catch(error){console.error('Error processing block:',error);}}return newCoins;}async getNewCoins(){try{const coins=await this.scanForNewCoins();return coins;}catch(error){console.error('Error fetching new coins:',error);throw error;}}async getCoinDetails(address){try{const token=new ethers.Contract(address,['function name() view returns (string)','function symbol() view returns (string)','function totalSupply() view returns (uint256)','function decimals() view returns (uint8)','function balanceOf(address) view returns (uint256)'],this.provider);const[name,symbol,totalSupply,decimals]=await Promise.all([token.name(),token.symbol(),token.totalSupply(),token.decimals()]);const verified=await this.verifyContract(address);// Get HYPE liquidity\nconst hypeBalance=await this.getHYPEBalance(address);return{address,name,symbol,totalSupply:ethers.utils.formatUnits(totalSupply,decimals),timestamp:Math.floor(Date.now()/1000),price:0,priceChange24h:0,volume24h:0,liquidity:parseFloat(hypeBalance),holders:0,verified,favorite:false};}catch(error){console.error('Error fetching coin details:',error);return null;}}}","map":{"version":3,"names":["ethers","config","HyperEVMService","constructor","provider","latestBlockNumber","verifiedContracts","Set","HYPE_TOKEN","VERIFICATION_CONTRACT","providers","JsonRpcProvider","rpcUrl","getLatestBlockNumber","blockNumber","getBlockNumber","verifyContract","address","verificationContract","Contract","isVerified","error","console","getHYPEBalance","hypeToken","balance","decimals","Promise","all","balanceOf","utils","formatUnits","scanForNewCoins","newCoins","latestBlock","i","Math","max","block","getBlockWithTransactions","tx","transactions","to","receipt","getTransactionReceipt","hash","contractAddress","token","name","symbol","totalSupply","hypeBalance","push","timestamp","price","priceChange24h","volume24h","liquidity","parseFloat","holders","verified","favorite","add","getNewCoins","coins","getCoinDetails","floor","Date","now"],"sources":["/Users/admin/turbo-launchpad/src/services/hyperevm.ts"],"sourcesContent":["import { ethers } from 'ethers';\nimport { Coin } from '../types/Coin';\nimport { config } from '../config';\n\ninterface NewCoinEvent {\n  address: string;\n  name: string;\n  symbol: string;\n  timestamp: number;\n}\n\nexport class HyperEVMService {\n  private provider: ethers.providers.JsonRpcProvider;\n  private latestBlockNumber: number = 0;\n  private verifiedContracts: Set<string> = new Set();\n  private readonly HYPE_TOKEN = '0x0d01dc56dcaaca66ad901c959b4011ec';\n  private readonly VERIFICATION_CONTRACT = '0x1234567890123456789012345678901234567890'; // Replace with actual verification contract\n\n  constructor() {\n    this.provider = new ethers.providers.JsonRpcProvider(config.rpcUrl);\n  }\n\n  async getLatestBlockNumber(): Promise<number> {\n    const blockNumber = await this.provider.getBlockNumber();\n    this.latestBlockNumber = blockNumber;\n    return blockNumber;\n  }\n\n  async verifyContract(address: string): Promise<boolean> {\n    try {\n      const verificationContract = new ethers.Contract(\n        this.VERIFICATION_CONTRACT,\n        ['function isVerified(address) view returns (bool)'],\n        this.provider\n      );\n      \n      const isVerified = await verificationContract.isVerified(address);\n      return isVerified;\n    } catch (error) {\n      console.error('Error verifying contract:', error);\n      return false;\n    }\n  }\n\n  async getHYPEBalance(address: string): Promise<string> {\n    try {\n      const hypeToken = new ethers.Contract(this.HYPE_TOKEN, [\n        'function balanceOf(address) view returns (uint256)',\n        'function decimals() view returns (uint8)'\n      ], this.provider);\n\n      const [balance, decimals] = await Promise.all([\n        hypeToken.balanceOf(address),\n        hypeToken.decimals()\n      ]);\n\n      return ethers.utils.formatUnits(balance, decimals);\n    } catch (error) {\n      console.error('Error fetching HYPE balance:', error);\n      return '0';\n    }\n  }\n\n  async scanForNewCoins(): Promise<Coin[]> {\n    const newCoins: Coin[] = [];\n    \n    // Get the latest block number\n    const latestBlock = await this.getLatestBlockNumber();\n    \n    // Scan through recent blocks (last 100 blocks)\n    for (let i = Math.max(0, latestBlock - 100); i <= latestBlock; i++) {\n      try {\n        const block = await this.provider.getBlockWithTransactions(i);\n        \n        // Check each transaction for new token deployments\n        for (const tx of block.transactions) {\n          if (tx.to === null) { // New contract deployment\n            const receipt = await this.provider.getTransactionReceipt(tx.hash);\n            if (receipt && receipt.contractAddress) {\n              const address = receipt.contractAddress;\n              try {\n                // Get token details\n                const token = new ethers.Contract(address, [\n                  'function name() view returns (string)',\n                  'function symbol() view returns (string)',\n                  'function totalSupply() view returns (uint256)',\n                  'function decimals() view returns (uint8)',\n                  'function balanceOf(address) view returns (uint256)',\n                ], this.provider);\n\n                const [name, symbol, totalSupply, decimals] = await Promise.all([\n                  token.name(),\n                  token.symbol(),\n                  token.totalSupply(),\n                  token.decimals(),\n                ]);\n\n                // Check if contract is verified\n                const isVerified = await this.verifyContract(address);\n\n                // Get HYPE liquidity\n                const hypeBalance = await this.getHYPEBalance(address);\n\n                newCoins.push({\n                  address,\n                  name,\n                  symbol,\n                  totalSupply: ethers.utils.formatUnits(totalSupply, decimals),\n                  timestamp: block.timestamp,\n                  price: 0,\n                  priceChange24h: 0,\n                  volume24h: 0,\n                  liquidity: parseFloat(hypeBalance),\n                  holders: 0,\n                  verified: isVerified,\n                  favorite: false\n                });\n\n                // Cache verified contracts\n                if (isVerified) {\n                  this.verifiedContracts.add(address);\n                }\n              } catch (error) {\n                console.error('Error fetching token details:', error);\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error processing block:', error);\n      }\n    }\n\n    return newCoins;\n  }\n\n  async getNewCoins(): Promise<Coin[]> {\n    try {\n      const coins = await this.scanForNewCoins();\n      return coins;\n    } catch (error) {\n      console.error('Error fetching new coins:', error);\n      throw error;\n    }\n  }\n\n  async getCoinDetails(address: string): Promise<Coin | null> {\n    try {\n      const token = new ethers.Contract(address, [\n        'function name() view returns (string)',\n        'function symbol() view returns (string)',\n        'function totalSupply() view returns (uint256)',\n        'function decimals() view returns (uint8)',\n        'function balanceOf(address) view returns (uint256)',\n      ], this.provider);\n\n      const [name, symbol, totalSupply, decimals] = await Promise.all([\n        token.name(),\n        token.symbol(),\n        token.totalSupply(),\n        token.decimals(),\n      ]);\n\n      const verified = await this.verifyContract(address);\n      \n      // Get HYPE liquidity\n      const hypeBalance = await this.getHYPEBalance(address);\n      \n      return {\n        address,\n        name,\n        symbol,\n        totalSupply: ethers.utils.formatUnits(totalSupply, decimals),\n        timestamp: Math.floor(Date.now() / 1000),\n        price: 0,\n        priceChange24h: 0,\n        volume24h: 0,\n        liquidity: parseFloat(hypeBalance),\n        holders: 0,\n        verified,\n        favorite: false\n      };\n    } catch (error) {\n      console.error('Error fetching coin details:', error);\n      return null;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}